/* automatically generated by rust-bindgen 0.69.2 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MyStruct {
    #[doc = " example data containing fixed length array of floats"]
    pub data: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_MyStruct() {
    const UNINIT: ::std::mem::MaybeUninit<MyStruct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MyStruct>(),
        16usize,
        concat!("Size of: ", stringify!(MyStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<MyStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(MyStruct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MyStruct),
            "::",
            stringify!(data)
        )
    );
}
